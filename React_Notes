For react application donwnload and install npm and npx
To create react application run - npx create-react-app "project name"
cd "project name" and run npm start 
Go to src/App.js and change Edit to "hello world"
Your basic first application is ready.

Other way to create React package 
npm install create-react-app -g
then just do create-react-app "project name"  

Folder Structure and Work flow

Package.json = Contains all the dependencies and scripts required for project 
Pacjage-lock.json = to ensure smooth installation of the packages.
Folder-node-module = is the folder all the dependecies are installed, generated when npm command is run 
public-folder = 
	manifest.json = is concerned with progressive web app
	index.html = It is the only html file you will have in your entire application.The view in the browser may change but this the ultimate page which will render.No changes are made in this file, if needed can change only the header tag and body tag should not be touched as it is controlled by React.
	<div id = "root"> we call root DOM node as everything as inside is controlled by React.
	
src-folder = mostly used folder for development
	index.js=starting point for our application 
		  in index.js we specify root component which is App component and DOM element which is controlled by react.
		  DOM element in our example is 
		  In hello world program App component is rendered inside root DOM node
	App.js   = contains a app compenent  
		   Represents the view which we see in the browser.
	App.css = CSS file for styling
	App.test.js = contains a simple test case
	index.css = applies style to the body tag.
	service.js = it is for progressive app and can be ignored as beginner
	
	
Flow :
* when you run the command npm start index.html file is served in the browser.
* Index.html contains the root DOM node, next the control enters the index.js where ReactDOM renders the App component onto the root DOM node.
* the App component(app.js)contains the html which is ultimately displayed in the browser.

Component :
* Different component come under main root component.
* Nested components makeup for one part of the UI and all the components make up the whole page of UI
* Components are Reusable, the same component can be used with different properties to display different information
* Components may contain the other components.
* component code is inserted in .js file and can be incorpated in .jsx file as well

Component Types
In react there are two component types
Stateless Functional Component  and  stateful class component
* Functional component are literally Javascript functions, returns html which is dispalyed on UI

* Class components on the other hand regular ES6 classes that extends component class from the react library, they must contain render method which inturn returns HTML.(render() method)

Functional Components
* Its just a javascript functions, they can recieve object of propertie-props and return HTML called JSX
Creating Functional Components
* Create a Folder called components
* inside a folder create file Greet 
* Inside Greet first import react
* then define afunction and do a export of that function -using default export 
* then we have to render that function through our App component, by importing that function and writing it in a tag(<Greet/>), in div tags in App.js
* Use Arrow function as much as possible
* Named Export:
	* exporting the arrow function itself 
	* we should import in a curly braces
	
Class Components
* optionally recieve props as input and return HTML 
* It can maintian some information which is private for that component and use that information to describe the user interface this is called state.

Function vs Class Components 
Functions
* Use Functional components as much as possible
* Absence of 'this' key compared to class component, where it confuses the beginner
* solution can be arrived without state, state for every component makes maintainance huge
* Functions are mainly responsible for user insterface
* hence, It is also called dumb/presentational components

Class
* It is more feature rich
* Maintain there own private data, also known as state
* Complex UI logic can be written 
* provide lyfecycle hooks
* It is also called statefull/smart/Container

JSX
Show both way of doing things, using jsx and without using JSX
With using its just html inside return()
without using JSX, react library provides a function called React.createElement which takes many number of arguments
Syntax : React.createElement(tagname, property, subject or text), 

Props with function
* Components are reusable
* Use Greet function as many times you need in app.js, with a property "name"
* Then we can pass data with props like weâ€™re giving an argument to a function:
* Use the property in greet.js in the form of {prop.name}
* If you want to print any line between components which are used twice, <greet attrs ="" ><p></p></greet>, here inside greet tag you will be writing main properties and in <p> you will be writing any child props.
	* inside greet.js simple mention {props.children} to render it.
	* In JSX we always have to keep in mind on component should be wrapped with only one tag althrough, though it can contain nested 		tags.
* props are immutable - if you need to change any thing inside component for prop, it can't be changed
    const Greet = props =>{
    console.log(props)
    return (
        <div>
            <h1> Hello {props.name} is {props.heroname}</h1>
            {props.children}
        </div>
    )
} 
(Code Changed in destructuring)

	
props with Class
* It is similar to function, but the only difference is, doesn't require to pass props in function argument, instead use this keyword directly {this.props.name}
class Welcome extends Component {
    render() {
        return <h1>Welcome {this.props.name} a.k.a {this.props.heroname}</h1>
    }
}
(Code Changed in destructuring)
 

props Vs State
props get passes to the component           state is managed within the component
function parameter                          variables declared in the function body
props are immutable                         state can be changed
props - functional components               usestate Hook - functional components
this.props - class components 	      this.state - Class Components



state
* A state is object privately mentioned inside the component
* A state can influence what is rendered in the browser and can be changed with the help of events
* refer message.js for state.



setState
* Use ES7 React snippets in vscode and use that to automatically give class by typing rce+tab. rconst for constructor 
* setstate is used to change the value of the state.
* Always make use of setState and never modify the state directly
* Code has to be executed after the state has been updated?. Place that code in the call back function which is the second argument to the setState method.
* when you have to update state based on the previous state value, pass in a function as an argument instead of the regular object.
* when you modify the state directly it wont rerender the component.
* React may group multiple setstate calls into a single update for better performance.
 	so whenever you want to update the value based on the previous state, we need to send function inside set state method, instead of object. 
 	
 	
 	
Destructuring
==> In functional Components
* Destructuring helps us unpack values from arrays or properties from objects into distinct variables.
* we can just pass name, heroname in function arguments instead of props and we can directly declare {name} and {heroname} in body instead of {props.name} ==> first way destructuring in the parameter
const Greet = ({name,heroname}) =>{
    return (
        <div>
            <h1> Hello {name} is {heroname}</h1> 
        </div>
    )
} 
* Another way of extracting attribites from props is giving props in the argument of a function and writing constants {'attrs'} = props 
    const Greet = props =>{
    const {name, heroname} = props
    return (
        <div>
            <h1> Hello {name} is {heroname}</h1> 
        </div>
    )
}  
	
Destructuring ==> In Class Components
* In class we tend to destructure the props in render() method
    class Welcome extends Component {
    render() {
        const {name, heroname} = this.props
        return <h1>Welcome {name} a.k.a {heroname}</h1>
    }
}
* We can also destructure the state by just adding this line
	const {state1, state2} = this.state in render method



Event Handling ==>
Function Component
* React Events are defined using camelCase rather than lowercase
* In Jsx instad of passing string in eventhandler we will be passing function, hence it is specified in curly brackets{}
* While specifying the function in the eventhandler it is function not function call, so dont use paranthesis after it
	Wrong                                                                     Correct
    <button onClick={clickHandler()}>click</button>                      <button onClick={clickHandler}>click</button>
   Refer FinctionClick for function event handling

 Class Component
* It is same as Function component but while defining a function in eventhandler just specify {this.function}
      <button onClick={this.clickHandler}>click</button> 
      
     
     
Binding Event Handlers
* "this" keyword is undefined in an eventhandler hence we need to bind the event in react class components
* There are different methods to bind the events
Approach 1:- Using bind keyword
	clickHandler(){
        this.setState({
            message : 'GoodBye '
        })
        console.log(this)
    }
    

    render() {
        return (
            <div>
                <div>{this.state.message}</div>
                <button onClick = {this.clickHandler.bind(this)}>click</button>
            </div>
        )
    }
}
Review - Not recommended as performance complications

Approach 2:- Arrow Function method
* Refer to the message.js

Review - Not Recommended as performance complications as it is similar to 1st approach

Approach 3:- Most used, and seen in React Documentation
* This method deals with event handler in the constructor as opposed to binding in the render method.
	constructor(props) {
        super(props)
    
        this.state = {
             message: 'Hello'
        }
        this.clickHandler = this.clickHandler.bind(this)
    }
    
    (skipped clickHandler here but should be defined)
    
      render() {
        return (
            <div>
                <div>{this.state.message}</div>
                {/* <button onClick = {this.clickHandler.bind(this)}>click</button> */}
                <button onClick = {this.clickHandler}>click</button>
            </div>
        )
    }
}
Review - Recommended in React documentation and is best option

Approach 4:-Use Arrow function as class property 
	Just replace the event function with arrow function, in our case clickHandler function
	 clickHandler = () => {
        this.setState({
            message: 'Goodbye'
        })
    }
Review - Its still in experimentation stage, as per 2018 tutorial



Methods as props
* To achieve  - When I click on the button in child component the method in parent component should be executed using props
* We should pass the method itself in the prop ==> refer ParentCompoent.js and ChildComponent.js
	Step 1 - Define a method in  Parent Component
	step 2 - render the child component in parent Component by defining tag as in APP.js
	step 3 - Pass the method in childcomponent tag as props in parentComponents
	step 4 - in the childcomponent.js access the methods as props object  

* We can also pass parameters back from childcomponent to parentComponent
	in order use parameter use arrowfunction syntax, check 









      
      
    
	


 
	
 










