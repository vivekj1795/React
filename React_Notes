For react application donwnload and install node js
To create react application run - npx create-react-app "project name"
cd "project name" and run npm start 
Go to src/App.js and change Edit to "hello world"
Your basic first application is ready.


Other way to create React package 
npm install create-react-app -g
then just do create-react-app "project name"  

						--x--x--x--x--x--x--x--x--x--x--

React: The Virtual DOM
Fighting Wasteful DOM Manipulation
The Problem
DOM manipulation is the heart of the modern, interactive web. Unfortunately, it is also a lot slower than most JavaScript operations.

This slowness is made worse by the fact that most JavaScript frameworks update the DOM much more than they have to.

As an example, let’s say that you have a list that contains ten items. You check off the first item. Most JavaScript frameworks would rebuild the entire list. That’s ten times more work than necessary! Only one item changed, but the remaining nine get rebuilt exactly how they were before.

Rebuilding a list is no big deal to a web browser, but modern websites can use huge amounts of DOM manipulation. Inefficient updating has become a serious problem.

To address this problem, the people at React popularized something called the virtual DOM.

The Virtual DOM
In React, for every DOM object, there is a corresponding “virtual DOM object.” A virtual DOM object is a representation of a DOM object, like a lightweight copy.

A virtual DOM object has the same properties as a real DOM object, but it lacks the real thing’s power to directly change what’s on the screen.

Manipulating the DOM is slow. Manipulating the virtual DOM is much faster, because nothing gets drawn onscreen. Think of manipulating the virtual DOM as editing a blueprint, as opposed to moving rooms in an actual house.

How it helps
When you render a JSX element, every single virtual DOM object gets updated.

This sounds incredibly inefficient, but the cost is insignificant because the virtual DOM can update so quickly.

Once the virtual DOM has updated, then React compares the virtual DOM with a virtual DOM snapshot that was taken right before the update.

By comparing the new virtual DOM with a pre-update version, React figures out exactly which virtual DOM objects have changed. This process is called “diffing.”

Once React knows which virtual DOM objects have changed, then React updates those objects, and only those objects, on the real DOM. In our example from earlier, React would be smart enough to rebuild your one checked-off list-item, and leave the rest of your list alone.

This makes a big difference! React can update only the necessary parts of the DOM. React’s reputation for performance comes largely from this innovation.

In summary, here’s what happens when you try to update the DOM in React:

The entire virtual DOM gets updated.
The virtual DOM gets compared to what it looked like before you updated it. React figures out which objects have changed.
The changed objects, and the changed objects only, get updated on the real DOM.
Changes on the real DOM cause the screen to change.
If you’d like to learn more about the virtual DOM, here’s a good place to start.

Source - https://www.codecademy.com/articles/react-virtual-dom


						--x--x--x--x--x--x--x--x--x---x--x--x--x--
					
					
					
Folder Structure and Work flow

* Package.json = Contains all the dependencies and scripts required for project 
* Pacjage-lock.json = to ensure smooth installation of the packages.
* Folder-node-module = is the folder all the dependencies are installed, generated when npm command is run 
* public-folder = 
	manifest.json = is concerned with progressive web app
	index.html = It is the only html file you will have in your entire application.The view in the browser may change but this the ultimate page which will render.No changes are made in this file, if needed can change only the header tag, but body tag should not be touched as it is controlled by React.
	<div id = "root"> we call root DOM node as everything inside is controlled by React.
* src-folder = mostly used folder for development
	index.js=starting point for our application 
		  in index.js we specify root component which is App component and DOM element which is controlled by react.
		  DOM element in our example is 
		  In hello world program App component is rendered inside root DOM node
	App.js   = contains a app component  
		   Represents the view which we see in the browser.
	App.css = CSS file for styling
	App.test.js = contains a simple test case
	index.css = applies style to the body tag.
	service.js = it is for progressive app and can be ignored as beginner
	
	
Flow :
* when you run the command npm start index.html file is served in the browser.
* Index.html contains the root DOM node, next the control enters the index.js where ReactDOM renders the App component onto the root DOM node.
* the App component(app.js)contains the html which is ultimately displayed in the browser.

Component :
* Different component come under main root component.
* Nested components makeup for one part of the UI and all the components make up the whole page of UI
* Components are Reusable, the same component can be used with different properties to display different information
* Components may contain the other components.
* component code is inserted in .js file and can be incorpated in .jsx file as well

Component Types
In react there are two component types
Stateless Functional Component  and  stateful class component
* Functional component are literally Javascript functions, returns html which is dispalyed on UI

* Class components on the other hand regular ES6 classes that extends component class from the react library, they must contain render method which inturn returns HTML.(render() method)

Functional Components(Refer Greet.js)
* Its just a javascript functions, they can recieve object of properties-props and return HTML called JSX
Creating Functional Components
* Create a Folder called components
* inside a folder create file Greet 
* Inside Greet first import react
* then define afunction and do a export of that function -using default export 
* then we have to render that function through our App component, by importing that function and writing it in a tag(<Greet/>), in div tags in App.js
* Use Arrow function as much as possible
* Named Export:
	* exporting the arrow function itself 
	* we should import in a curly braces
	
Class Components(refer welcome.js)
* optionally recieve props as input and return HTML 
* It can maintian some information which is private for that component and use that information to describe the user interface this is called state.



Function vs Class Components 
Functions
* Use Functional components as much as possible
* Absence of 'this' key compared to class component, where it confuses the beginner
* solution can be arrived without state, state for every component makes maintainance huge
* Functions are mainly responsible for user interface
* hence, It is also called dumb/presentational components

Class
* It is more feature rich
* Maintain there own private data, also known as state
* Complex UI logic can be written 
* provide lyfecycle hooks
* It is also called statefull/smart/Container


JSX(Refer Hello.js)
Show both way of doing things, using jsx and without using JSX - Refer Hello.js
With using its just html inside return()
without using JSX, react library provides a function called React.createElement which takes many number of arguments
Syntax : React.createElement(tagname, property, subject or text), 


Props with function
* Components are reusable
* Use Greet function as many times you need in app.js, with a property "name"
* Then we can pass data with props like we’re giving an argument to a function:
* Use the property in greet.js in the form of {prop.name}
* If you want to print any line between components which are used twice, <greet attrs ="" ><p></p></greet>, here inside greet tag you will be writing main properties and in <p> you will be writing any child props.
	* inside greet.js simply mention {props.children} to render it.
	* In JSX we always have to keep in mind on component should be wrapped with only one tag althrough, though it can contain nested 		tags.
* props are immutable - if you need to change any thing inside component for prop, it can't be changed
    const Greet = props =>{
    console.log(props)
    return (
        <div>
            <h1> Hello {props.name} is {props.heroname}</h1>
            {props.children}
        </div>
    )
} 
(Code Changed in destructuring)



	
props with Class(refer welcome.js)
* It is similar to function, but the only difference is, doesn't require to pass props in function argument, instead use this keyword directly {this.props.name}
class Welcome extends Component {
    render() {
        return <h1>Welcome {this.props.name} a.k.a {this.props.heroname}</h1>
    }
}
(Code Changed in destructuring)
 



props Vs State
props get passes to the component           state is managed within the component
function parameter                          variables declared in the function body
props are immutable                         state can be changed
props - functional components               usestate Hook - functional components
this.props - class components 	      this.state - Class Components




state
* A state is object privately mentioned inside the component
* A state can influence what is rendered in the browser and can be changed with the help of events
* refer message.js for state.



setState
* Use ES7 React snippets in vscode and use that to automatically give class by typing rce+tab. rconst for constructor 
* setstate is used to change the value of the state.
* Always make use of setState and never modify the state directly
* Code has to be executed after the state has been updated?. Place that code in the call back function which is the second argument to the setState method.
* when you have to update state based on the previous state value, pass in a function as an argument instead of the regular object.
* when you modify the state directly it won't rerender the component.
* React may group multiple setstate calls into a single update for better performance.
 	so whenever you want to update the value based on the previous state, we need to send function inside set state method, instead of object. 
 	
 	
 
 	
Destructuring(refer Greet.js)
==> In functional Components
* Destructuring helps us unpack values from arrays or properties from objects into distinct variables.
* we can just pass name, heroname in function arguments instead of props and we can directly declare {name} and {heroname} in body instead of {props.name} ==> first way destructuring in the parameter
const Greet = ({name,heroname}) =>{
    return (
        <div>
            <h1> Hello {name} is {heroname}</h1> 
        </div>
    )
} 
* Another way of extracting attribites from props is giving props in the argument of a function and writing constants {'attrs'} = props 
    const Greet = props =>{
    const {name, heroname} = props
    return (
        <div>
            <h1> Hello {name} is {heroname}</h1> 
        </div>
    )
}  

Destructuring ==> In Class Components(refer Welcome.js)
* In class we tend to destructure the props in render() method
    class Welcome extends Component {
    render() {
        const {name, heroname} = this.props
        return <h1>Welcome {name} a.k.a {heroname}</h1>
    }
}
* We can also destructure the state by just adding this line
	const {state1, state2} = this.state in render method




Event Handling ==>(EventBind.js)
Function Component
* React Events are defined using camelCase rather than lowercase
* In Jsx instad of passing string in eventhandler we will be passing function, hence it is specified in curly brackets{}
* While specifying the function in the eventhandler it is function not function call, so dont use paranthesis after it
	Wrong                                                                     Correct
    <button onClick={clickHandler()}>click</button>                      <button onClick={clickHandler}>click</button>
   Refer FinctionClick for function event handling

 Class Component
* It is same as Function component but while defining a function in eventhandler just specify {this.function}
      <button onClick={this.clickHandler}>click</button> 
      
     
 
     
Binding Event Handlers(refer EventBind.js)
* "this" keyword is undefined in an eventhandler hence we need to bind the event in react class components
* There are different methods to bind the events
Approach 1:- Using bind keyword
	clickHandler(){
        this.setState({
            message : 'GoodBye '
        })
        console.log(this)
    }
    

    render() {
        return (
            <div>
                <div>{this.state.message}</div>
                <button onClick = {this.clickHandler.bind(this)}>click</button>
            </div>
        )
    }
}
Review - Not recommended as performance complications

Approach 2:- Arrow Function method
* Refer to the message.js

Review - Not Recommended as performance complications as it is similar to 1st approach

Approach 3:- Most used, and seen in React Documentation
* This method deals with event handler in the constructor as opposed to binding in the render method.
	constructor(props) {
        super(props)
    
        this.state = {
             message: 'Hello'
        }
        this.clickHandler = this.clickHandler.bind(this)
    }
    
    (skipped clickHandler here but should be defined)
    
      render() {
        return (
            <div>
                <div>{this.state.message}</div>
                {/* <button onClick = {this.clickHandler.bind(this)}>click</button> */}
                <button onClick = {this.clickHandler}>click</button>
            </div>
        )
    }
}
Review - Recommended in React documentation and is best option

Approach 4:-Use Arrow function as class property 
	Just replace the event handlerfunction with arrow function, in our case clickHandler function
	 clickHandler = () => {
        this.setState({
            message: 'Goodbye'
        })
    }





Methods as props
* To achieve  - When I click on the button in child component the method in parent component should be executed using props
* We should pass the method itself in the prop ==> refer ParentCompoent.js and ChildComponent.js
	Step 1 - Define a method in  Parent Component
	step 2 - render the child component in parent Component by defining tag as in APP.js
	step 3 - Pass the method in childcomponent tag as props in parentComponents
	step 4 - in the childcomponent.js access the methods as props object  

* We can also pass parameters back from childcomponent to parentComponent
	in order use parameter use arrowfunction syntax, check 
	


	
Conditional Rendering(UserGreeting.js)
* Rendering some html things on conditions, you hide and show it according to the conditions.
Approach 1:
	=> writing if and else statements on before returning anything
	if (this.state.isLoggedIn)
            return <div>Welcome Vivek
            <button onClick={() => this.changeMessage()}>Logout</button>
            </div>
            else {
            return<div>Welcome Guest
            <button onClick={() => this.changeMessage()}>Login</button>
            </div>
        } 
        => we cannot write if and else condition on <div> tags directly as JSX doesn't support that
        
Approach 2:
	=> Element Variables - Just write if else condition in javascript variables 
	let message
        if (this.state.isLoggedIn) {
            message = <div>Welcome Vivek</div>
        } else {
            message = <div>Welcome Guest</div>
        }

    return <div>{message}</div>
	
Approach 3: 
	=> Ternary operator - Allows to write conditions inside JSX - simple and mostly used
	return(
            this.state.isLoggedIn ? 
            <div>Welcome Vishwas</div> : 
            <div>Welcome Guest</div>
        )
        Condition ? True : Flase
        
Approach 4: short Circuit operator
	=> Used when you have conditions link either you want render something or nothing.
	return this.state.isLoggedIn && <div>Welcome Vivek</div>
	
	

List Rendering(refer todo.js and NameList.js)
	=>You can use map method to render items inside the list one by one
	function NameList() {
	    const names = ['Vivek','Aditya','Ashwin']
	    const nameList = names.map(name => <h2>{name}</h2>)
	    return (
		<div>{nameList}
		</div>
    )
}
     =>Or you can use a seperate component to render it using props, refer above given files
     
     
     
     
Lists and Keys
* A "key" is special string/int attribute you need to include when creating lists of elements.
* keys give elements a stable identity 
* keys help React identify which items have changed, are added, or are removed.
* Help in efficient update of user interface
* Refer NameList.js and todo.js
	const todoList = todos.map(todoss => <Todo key={todoss.id} todoss={todoss} />)
	
	


Index as key(second statement in NameList.js)
* When key prop is not given, then react will automatically index value given by react
* Index as key should only be used when
 1. the items in your list do not have unique id, if you have use that as the key
 2. the list is a static list and will not change
 3. the list will never be recordered or filtered
 
 
 
 
Styling React Components
 Approach 1:
 	=>  StyleSheet method, create a new style sheet in components folder(myStyle.css), add a class there, and import that in necessary 
 	component(StyleSheet.js)
 	=> We can specify simply the classname with className keyword inside html tag or
 	=> we can bring it as props (currently done with primary class)
 	=> for usage of multiple classes we should use template literals(` `)
 	
 Approach 2:(refer inline.js)
 	=>inline method, inside the component file itself we will be writing the css properties in an object, and with key as css property and value as string.
 	
Approach 3:
	=>CSS modules 
	=>classes are locally scoped, css style applies all the child components as well
	=>but "import Styles from './appStyles.module.css'" cannot be imported for any child components as they are imported as style
	
Reference - https://medium.com/@pioul/modular-css-with-react-61638ae9ea3e#.re1pdcz87
 	
						--x--x--x--x--x--x--x--x--x--x--

 	
Basics of Form(Refer Form.js)
* the form, label and input tags are as used in html
* the value of the input field is set to the state property, and there is onChange event fired whenever there is change in the input field value. in the onChange handler we use the setstate method to update the state.
* we should pass a parameter to the handler(that is event handler function), that is "event" which helps to  extract or catch the value given in input element using event.target.
 	  handleTopicChange = (event) => {
        this.setState({
            topic:event.target.value
        })
        console.log(this.state.topic)
    }  
* For input and textarea and other fields, the state can be empty string, but for select tag, intialy the state must be one of the option, otherwise setstate doesn't work on that.
* to handle the submit of the form, add onSubmit event on the form tag, which can be difined using a handler function(don't forget to use a prevent default function)
 
						--x--x--x--x--x--x--x--x--x--x--	
  
Lifecycle methods
* When we create a react component, the component goes through several stages in its life cycle
* There are Lifecycle methods for class components, this methods doesn't exist for functional components.
* the methods are classified into 4 phases
 => Mounting - when a instance of a component is bieng created and inserted into the DOM
 => updating - when a component is being rerendered as result of changes to either its props or state
 => Unmounting - when a component is bieng removed from the DOM
 => error handing - when there is an error during the rendering in a lifecycle method, or in the constructor of any child component.
 these phases different method, which can be used
 Mounting  => constructor , static getDerivedFormProps, render and componentDidMOunt
 Updating  => static getDerivedStateProps, shouldComponentUpdate, render, getSnapshotbeforeupdate and componentDidUpdate.
 Unmounting => componentWillUnmount
 Error Handling => static getDerivedStateError and componentDidCatch.
 
 
 
 
Mounting Lifecycle Methods(refer to LifecycleA.js)
* Constructor(props) - A special fucntion that will get called whenever a new component is created
      =>it is good for initializing state or Binding the event handlers
      =>We should not make http request  with in a constructor(should not cause side effects)
      =>super(props) should be used when building our own constructor, otherwise this.props won't work
      =>Only in constructor we can directly call this.state to overwrite the state in all other cases it should use this.setstate.
      
* static getDerivedFromProps(props, state) - Rarely used lifecycle method, this method are used when the state of the component dependson the changes in props over time.
	=> since this method is static method, we cannot use "this" keyword in this method, so you have to just return an object which represent a new state of a component.
	=>Should not call http request in this method as well.(should not cause side effects)
	
* Render() - Only required method in the class component.
	=> its function is to read props and state and return jsx which is rendered on the UI 
	=> should not change state or interact with DOM or make ajax calls from this method.(should not cause side effects)
	=> Right after the parent render method, the children components lifecycle methods are also executed.
	
* componentDidMount - Invoked only once throughout the lifecycle of the DOM.
		=>Invoked immediately after a component and all its children components have been rendered to the DOM 
		=> Cause side effects - interact with the DOM or perform  any ajax calls to load data.
		
* just console_log all the methods to see how the flow goes, as Done in LifecycleA file.
* When we have the child component, parent component's first three methods renders first(Constructor, Static getDerivedFormProps and Render method) after that, the child components all four methods gets executed and finally parent component's componentDidMount gets executed. 




Updating Lifecycle Methods()(refer LifecycleA.js and LifecycleB.js files)
* There are 5 methods, in which 3 are rarely used.

* static getDerivedStateFromProps(props, state) -
		=> Method is called everytime a component is re rendered
		=> this method are used when the state of the component dependson the changes in props over time.
		=> should not change state or interact with DOM or make ajax calls from this method.(should not cause side effects)
		=> Rarely Used method.
		
* ShouldComponentUpdate(nextProps, nextState) -
		=> Recieves updated props and state.
		=> This method dictates if the component should rerender or not, by default all components re-render when they recieve 	props or when there states changes. This method can prevent that default behavior by returning false. 
		=> it compares the existing state and props values with new state and props values and returns true or false to rerender 	sthe component accordingly.
		=> This method is basically for performance optimisation.
		=> Should not call http request and setstate method as well.(should not cause side effects)
		=> Rarely used method.
		

* Render() - Same as above .
<header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        <p>
          Edit <code>src/App.js</code> and save to reload.
        </p>
        <a
          className="App-link"
          href="https://reactjs.org"
          target="_blank"
          rel="noopener noreferrer"
        >
          Learn React
        </a>
      </header>
* getSnapBeforeUpdate(prevProps, PrevState) - 
		=>gets previous props and states as arguments and called right before the changes from the virtual DOM are to be 		reflected in the DOM 
	=> Capture some information from the DOM.
	=> Method will either return null or return the value.Returned value will be passed as the third parameter to the next method.
	
* ComponentDidUpdate(prevprops,prevState,snapshot) - 
	=>called after the render is finished in the re-render cycles.
	=>Called once in rerender method.
	=>cause side effects, suitable to make ajax call based on the previous and current props value.
	
* Render and componentDidupdate are the two methods mostly used in updating phase.




Unmounting Phase Method
*It involves only one method
* componentWillUnmount 
			=>method is invoked immediately before a component is unmounted and destroyed.
			=>cancelling any network requests, removing event handles, cancelling any subscription and also invalidating 
			timers.
			=>Do not call the setState method.
			

						--x--x--x--x--x--x--x--x--x--x--


Fragments (Refer to Table.js and Column.js)

* It is termed in the advanced section of the document.
* Fragments lets you group list of children eliments without adding extra nodes to the DOM.
* Remember we discussed about jsx, where all the code should be enclosed in one tag that is div tag,  it is simply creating one extra node in react DOM, so go ahead and remove the div tag and include <React.Fragments>.(Refer FragmentDemo.js)
* Imagine this scenario, Where you have parent and child component, in parent component you are using <table> tag as main tag in jsx, so no problem, but you want put columns of a table in child component, then you are writing <td> tags inside jsx enclosed by div tag, hence react will give an error saying, you cannot include <td> tag a child of <div> tag, so you <React Fragments> comes to your help.
* Items in the list nees key prop, hence Fragments take attibutes key={item.id}
* <React.fragments> can be replaced with <> and </>, there is on e limitations for this, that is we cannot pass in key attribute.


						--x--x--x--x--x--x--x--x--x--x--



Pure (Refer PureComp.js, RegularComp.js, ParentComp.js)

* Till now we were creating class component, by extending component class from react.
* Now we can create a class component with pure component
* Consider this scenario, where you have parent component and two child component, in which one is regular component and another is pure class component.
	=> Just create a state and setstate with interval of 2seconds in parentcomp and pass it on to regularprop and purecomp through 	props. put a console.log in each of the component. 
	=>Now,when you check the browser you will see, msges from three components at the first and for every two seconds setstate gets 	refreshed and you will see respective msges from parent and regular components. when parent component updates child components also 	updates automaically. But you don't see msges from pure component and why   	 is that?...,  
	=>     	Regular Component							Pure Component
		A regularcomponent does not implement the 		|	A Pure component on the other hand implements
		shouldComponentUpdate method. It always returns	|	shouldComponentUpdate with a shallow props and 
		true by default                                       |	state comparision.
		
	=> Shallow Comparision - there are two approaches for this comparision
		primitive Types -  
		 =>a (SC) b returns if a and b have the same value and are of the same type.
		 	ex: string 'vivek'(SC) string 'vivek' returns True
		 	
		 Complex Types -
		  => a (sc) b returns if a and b references the exact same object.
		  	var a = [1,2,3]
		  	var b = [1,2,3]
		  	var c = a 
		  	
		  	a (sc) b #false
		  	a (sc) c  #true
	=> A pure component implements shouldComponentUpdate with a shallow prop and state component.
	
		It does shallow comparision of prevState with the currentState   
		It does shallow comparision of prevProps with the currentProps    ==> When there is a difference the component will Re render.  
	=> By converting parent component class to pure component, then nothing will rerender until it sees a difference in shallow comparision.
	=> Will have performance boost if we use Pure.
	=> One thing to remember here is, we should not change anything or mutate in the existing array or object, if you add anything into an array, the shallow comparision doesn't see the difference here as it points to same reference, hence re render doesn't happen.
	=> Always return new object or array when dealing with pure components.
	=> It is a good idea to ensure that all the children compoenents are also pure to avoid unexpected behaviour.
	
						--x--x--x--x--x--x--x--x--x--x--

Memo(refer Memocomponent.js and Parentcomponent.js)

=> Pure components only work with class components, the same thing can be achieved in functional components as well and that's where "memo" comes into picture.
=> Just write function component and in the end at "default export" export the component with React.memo(Memocomponent) to use memo.

						--x--x--x--x--x--x--x--x--x--x--

LifeCycle Hooks

* https://www.digitalocean.com/community/tutorials/how-to-build-a-react-to-do-app-with-react-hooks

Lifecycle methods in Hooks
* https://medium.com/javascript-in-plain-english/lifecycle-methods-substitute-with-react-hooks-b173073052a

useEffect 
*https://www.robinwieruch.de/react-hooks-fetch-data

https://dev.to/papasanto/build-a-react-hooks-shopping-cart-with-usestate-and-useeffect-39hk
https://academind.com/tutorials/react-hooks-introduction/
						--x--x--x--x--x--x--x--x--x--x--

Styling Library - Material UI Library

* Run command = npm install @material-ui/core to install Material UI for your application
* npm install @material-ui/icons to use icon from MUI library
* npm install @material-ui/Roboto-font for using different fonts

=>You should import everything for using it on your component form @material-ui/core


=>Button - first import button from @material-ui/core/Button 
	* it takes attrs like startIcon, variant, color, save
	* <Button startIcon = {<SaveIcon />} variant="contained" color="primary">	
	
=>TextField - varient, color, type
	<TextField variant = "outlined" color="secondary" type="Date"/>	
	
=><ButtonStyled/> => import { makeStyles } from '@material-ui/core/styles';
		  => put const variable and use makestyle to define different styles in it
		  => make use of it in a <button className= {classes.root}> 

=>Checkbox = import Checkbox = 
	* import Checkbox from '@material-ui/core/Checkbox'
	* import FormControlLabel from '@material-ui/core/FormControlLabel'
	* Write a function for it to toggle to and fro 
	* function Checkboxexample() {
    const [checked, setchecked] = React.useState(true)
    return (
        <FormControlLabel
        control = {<Checkbox 
            checked = {checked}
            onChange={(e) => setchecked(e.target.checked)} />}
        label="testing check box "
        />
          
      
    )
}
  
=>ThemeProvider = To override the existing properties 
		=> override the existing colors with different colors
		
=>Typography = to write texts with diff properties
		=> variant = h1-h6, subtitle
		
=>container = import Container from '@material-ui/core/Container'
		attrs => maxwidth = "sm"
		
=>Grid => import Paper from '@material-ui/core/Paper'
	  import Grid from '@material-ui/core/Grid'
	use paper to show the grids 
	attrs = container spacing={1-10}, justify = "center"
	<Grid item xs={3} sm={6}>
	
=>Appbar =>

Refer 

						--x--x--x--x--x--x--x--x--



React Router DOM(Refer my-media app)

* npm install react-router-dom
* What routing implies should be self explanatory. When we go from one section to another or when you click a link that is supposed to show you some different content, our browser loads a different view. You might say that routing is pretty simple, just include the path to different HTML pages inside the href attribute, however single page applications don’t work this way. They don’t load a completely different HTML rather just load a different view that corresponds to that particular route. To implement this in react we’d first have to install the React Router package.
* First we need to import certain components from the Router Module. The first one is BrowserRouter which tells React that everything that goes inside this tag will give you some information about routing. The next thing we want is Switch which will ensure that you can go to only one route at a time. Finally we want the Route Component which will tell the App Component to render a certain component on visiting a certain URL.

* npm install axios

* https://medium.com/swlh/exploring-react-part-1-a6e9368c9d81
* https://medium.com/swlh/exploring-react-higher-order-components-and-redux-5a683188aec8
* https://stackoverflow.com/questions/49162311/react-difference-between-route-exact-path-and-route-path#:~:text=The%20exact%20param%20disables%20the,match%20to%20the%20current%20url.
* https://github.com/ReactTraining/react-router/blob/master/packages/react-router-dom/docs/api/NavLink.md


						-x--x--x--x--x--x--x-

React Higher Order Components

* Imagine the scenario where you are using same code or logic in different components, it is waste of time to duplicate everything again and again right?.. , the solution we can imagine is write a functionality in parent component and define state and handler in child components. This works fine if you are using next consicutive child to define state and handler, but what happens when theu are scattered,  at this point higher order component comes into picture.(refer clickcounter and HoverCounter.js commented section)
* Higher Order Component(HOC) - a pattern where a function takes a component as an argument and returns a new component
	Structure =>  	const NewComponent = higherOrderCompoenent( original component )
* Takes original component adds functionality through higherordercomponent and produces the new enhanced component.(refer withCounter.js, clickCounter.js and HoverCounter.js)



React and Django Integration todo application

* https://www.digitalocean.com/community/tutorials/build-a-to-do-application-using-django-and-react
* https://towardsdev.com/django-react-app-from-scratch-to-deployment-part-1-8a2fa9a97f1

						    -x--x--x--x--x--x--x--x-


proptypes
When developing a React application, you might encounter the need for a prop to be structured and defined to avoid bugs and errors. Just like a function might have mandatory arguments, a React component might require a prop to be defined, otherwise, it will not render properly. If you forget to pass a required prop into a component that needs it, it could cause your app to behave unexpectedly.

PropTypes is React’s internal mechanism for adding type checking to components.
React components use a special property named propTypes to set up type checking.

Syntax
/**
 * FUNCTIONAL COMPONENTS
 */
function ReactComponent(props) {
  // ...implement render logic here
}

ReactComponent.propTypes = {
  // ...prop type definitions here
}


/**
 * CLASS COMPONENTS: METHOD 1
 */
class ReactComponent extends React.Component {
  // ...component class body here
}

ReactComponent.propTypes = {
  // ...prop type definitions here
}


/**
 * CLASS COMPONENTS: METHOD 2
 * Using the `static` class properties syntax
 */
class ReactComponent extends React.Component {
  // ...component class body here
  
  static propTypes = {
    // ...prop type definitions here
  }
}

If default props are set for the React component, the values are first resolved before type checking against propTypes. Therefore, default values are also subject to the prop type definitions.

Note that propTypes type checking only happens in development mode, enabling you to catch bugs in your React application while developing. For performance reasons, it is not triggered in the production environment.

REF: https://blog.logrocket.com/validating-react-component-props-with-prop-types-ef14b29963fc/
  Why Redux: https://www.newline.co/fullstack-react/articles/redux-with-mark-erikson/
  	   : https://daveceddia.com/what-does-redux-do/
  	   : https://daveceddia.com/how-does-redux-work/




							-x--x--x--x--x--x--x--x--x-
							

React-Redux
* install redux, react-redux, redux-thunk
* provider is nothing but the component, consider it as glue for react and redux.

createStore(reducer, [preloadedState], [enhancer])

Creates a Redux store that holds the complete state tree of your app. There should only be a single store in your app.

reducer (Function): A reducing function that returns the next state tree, given the current state tree and an action to handle.

[preloadedState] (any): The initial state. You may optionally specify it to hydrate the state from the server in universal apps, or to restore a previously serialized user session. If you produced reducer with combineReducers, this must be a plain object with the same shape as the keys passed to it. Otherwise, you are free to pass anything that your reducer can understand.

[enhancer] (Function): The store enhancer. You may optionally specify it to enhance the store with third-party capabilities such as middleware, time travel, persistence, etc. The only store enhancer that ships with Redux is applyMiddleware().



						--x--x--x--x--x--x--x--x--x--x--
Knox authentication, React and Django
https://medium.com/technest/implement-user-auth-in-a-django-react-app-with-knox-fc56cdc9211c


						--x--x--x--x--x--x--x--x--x--x--x--

import ReactDOM from 'react-dom';						
ReactDOM.render(<MyHeader />, document.getElementById('root'));




	
		


		  	
		  	
		
		
		

		
		

	



 
 
 
 





	
	


	 








      
      
    
	


 
	
 









 
